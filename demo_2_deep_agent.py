import asyncio
import os
import time
from dotenv import load_dotenv
from langchain_openai import AzureChatOpenAI
from langchain.tools import tool
from langchain.callbacks import get_openai_callback
from deepagents import create_deep_agent
from utils import setup_environment, print_header, console, web_search

# Load environment variables
load_dotenv()

# Define enhanced tools for the deep agent
@tool
def search_web_deep(query: str) -> str:
    """Enhanced web search with deep analysis capabilities"""
    return web_search(query)

@tool
def analyze_data_deep(data: str) -> str:
    """Deep analysis and summarization with enhanced LLM-powered pattern recognition"""
    # Create LLM client for deep analysis
    llm = AzureChatOpenAI(
        azure_deployment=os.getenv("MODEL_NAME", "gpt-4"),
        api_key=os.getenv("DIAL_API_KEY"),
        api_version=os.getenv("DIAL_API_VERSION", "2024-02-15-preview"),
        azure_endpoint=os.getenv("DIAL_API_URL"),
        temperature=0.1
    )
    
    deep_analysis_prompt = f"""Perform a comprehensive deep analysis of the following data:

Data to analyze:
{data}

Please provide an enhanced analysis including:
1. **Key Themes & Patterns**: Identify main themes and underlying patterns
2. **Semantic Analysis**: Extract semantic meaning and relationships
3. **Trend Analysis**: Identify trends, directions, and implications
4. **Evidence Assessment**: Evaluate strength and reliability of information
5. **Risk/Benefit Analysis**: Identify potential risks and benefits
6. **Confidence Scoring**: Provide confidence scores for key findings (0-100)
7. **Strategic Insights**: Provide actionable insights and recommendations
8. **Future Implications**: Discuss potential future developments

Format as a structured deep analysis with clear sections and insights."""

    try:
        result = llm.invoke(deep_analysis_prompt)
        content = result.content if hasattr(result, 'content') else str(result)
        
        word_count = len(data.split())
        char_count = len(data)
        
        return f"""Deep Agent Analysis Results:
📊 Content Statistics: {word_count} words, {char_count} characters
🧠 Enhanced LLM Analysis:
{content}

🎯 Analysis Methodology: Deep Agent pattern recognition with multi-dimensional evaluation
📈 Processing Level: Advanced semantic analysis with confidence scoring"""
    except Exception as e:
        return f"Deep analysis error: {str(e)}. Falling back to statistical analysis of {len(data)} characters."

@tool
def save_findings_deep(content: str, filename: str = "deep_research_report.md") -> str:
    """Save research findings with enhanced metadata and structure"""
    import os
    from datetime import datetime
    
    # Create timestamp
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Add metadata header to content
    enhanced_content = f"""# Deep Agent Research Report
**Generated:** {timestamp}
**Agent:** Deep Agent with DIAL API
**Tools Used:** search_web_deep, analyze_data_deep, save_findings_deep

---

{content}

---

**Report Metadata:**
- Generated by Deep Agent architecture
- Enhanced analytical capabilities
- Structured research methodology
- Confidence-scored findings
"""
    
    try:
        # Save to file
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(enhanced_content)
        
        return f"""📁 Enhanced File Save Complete:
📄 Filename: {filename}
⏰ Timestamp: {timestamp}
📏 Content Length: {len(enhanced_content)} characters
✅ File successfully saved to current directory
📊 Metadata: Research report with structured analysis, citations, and recommendations
🏷️ Tags: AI, Healthcare, Research, Analysis, Deep Agent Generated"""
    except Exception as e:
        return f"❌ Error saving file: {str(e)}"

def create_deep_agent_with_dial():
    """Create a Deep Agent using DIAL API"""
    
    # Create DIAL API client
    llm = AzureChatOpenAI(
        azure_deployment=os.getenv("MODEL_NAME", "gpt-4"),
        api_key=os.getenv("DIAL_API_KEY"),
        api_version=os.getenv("DIAL_API_VERSION", "2024-02-15-preview"),
        azure_endpoint=os.getenv("DIAL_API_URL"),
        temperature=float(os.getenv("TEMPERATURE", "0.1"))
    )
    
    # Enhanced tools list for deep agent
    tools = [search_web_deep, analyze_data_deep, save_findings_deep]
    
    # Enhanced instructions for deep agent behavior
    enhanced_instructions = """You are a comprehensive research agent with advanced analytical capabilities.

Your approach should be systematic but focused:

1. **Research**: Use search_web_deep to gather current, relevant information
2. **Analysis**: Use analyze_data_deep to identify key patterns and insights from your research
3. **Documentation**: Use save_findings_deep to create a well-structured report

Focus on delivering high-quality analysis rather than trying to use every available tool.
Provide comprehensive insights with evidence and cite your sources.
Your goal is to demonstrate the enhanced analytical capabilities of Deep Agent architecture."""

    # Create Deep Agent with the actual deepagents library API
    deep_agent = create_deep_agent(
        tools=tools,                   
        instructions=enhanced_instructions,
        model=llm
        # Removed builtin_tools to avoid complexity and recursion issues
    )
    
    return deep_agent

async def main():
    print_header("DEMO 2: DEEP AGENT WITH DIAL API")
    
    # Setup environment
    if not setup_environment():
        return
    
    if console:
        console.print("🧠 Creating Deep Agent with DIAL API...")
        console.print("[dim]This agent uses Deep Agent architecture with 4 core pillars[/dim]\n")
    else:
        print("🧠 Creating Deep Agent with DIAL API...")
        print("This agent uses Deep Agent architecture with 4 core pillars\n")
    
    try:
        # Create deep agent
        agent = create_deep_agent_with_dial()
        
        if console:
            console.print("✅ Deep Agent created successfully")
            console.print("📋 Enhanced tools: search_web_deep, analyze_data_deep, save_findings_deep")
            console.print("🧠 Features: Advanced analysis, enhanced documentation, structured approach\n")
        else:
            print("✅ Deep Agent created successfully")
            print("📋 Enhanced tools: search_web_deep, analyze_data_deep, save_findings_deep")
            print("🧠 Features: Advanced analysis, enhanced documentation, structured approach\n")
        
        # Focused task to showcase Deep Agent capabilities without recursion issues
        task = """Research the current applications of AI in healthcare. Please:
1. Search for recent information about AI healthcare applications
2. Analyze the key findings and trends
3. Create a structured report with your analysis
4. Include specific examples and benefits

Use your enhanced tools to provide a comprehensive but focused analysis."""
        
        if console:
            console.print(f"[bold]📝 Task:[/bold] {task}\n")
            console.print("[yellow]🚀 Running Deep Agent...[/yellow]")
            console.print("[green]🔄 Deep Agent Internal Processing:[/green]")
            console.print("[dim]Watch the Deep Agent create todos, use tools, and process systematically...[/dim]\n")
        else:
            print(f"📝 Task: {task}\n")
            print("🚀 Running Deep Agent...")
            print("🔄 Deep Agent Internal Processing:")
            print("Watch the Deep Agent create todos, use tools, and process systematically...\n")
        
        # Execute the task with the deep agent using streaming to show internal processing
        config = {"recursion_limit": 50}  # Increase from default 25 to 50
        
        # Start timing and token tracking
        start_time = time.time()
        
        final_result = None
        step_count = 0
        
        # Stream the agent execution to show internal processing with token tracking
        with get_openai_callback() as cb:
            for chunk in agent.stream({"messages": [{"role": "user", "content": task}]}, config=config):
                step_count += 1
                
                if console:
                    console.print(f"[blue]📋 Step {step_count}:[/blue]")
                else:
                    print(f"📋 Step {step_count}:")
                
                # Process each chunk to show what the agent is doing
                for node_name, node_output in chunk.items():
                    if console:
                        console.print(f"[yellow]🔧 Node:[/yellow] {node_name}")
                    else:
                        print(f"🔧 Node: {node_name}")
                    
                    # Show messages if they exist
                    if isinstance(node_output, dict) and 'messages' in node_output:
                        messages = node_output['messages']
                        if messages:
                            latest_message = messages[-1] if isinstance(messages, list) else messages
                            if hasattr(latest_message, 'content'):
                                content = latest_message.content
                                if content and len(str(content)) > 50:  # Only show substantial content
                                    preview = str(content)[:200] + "..." if len(str(content)) > 200 else str(content)
                                    if console:
                                        console.print(f"[dim]💬 Output: {preview}[/dim]")
                                    else:
                                        print(f"💬 Output: {preview}")
                            
                            # Check for tool calls
                            if hasattr(latest_message, 'tool_calls') and latest_message.tool_calls:
                                for tool_call in latest_message.tool_calls:
                                    tool_name = tool_call.get('name', 'unknown')
                                    if console:
                                        console.print(f"[green]🛠️ Tool Used:[/green] {tool_name}")
                                    else:
                                        print(f"🛠️ Tool Used: {tool_name}")
                    
                    # Store final result
                    final_result = node_output
                
                if console:
                    console.print("[dim]" + "─" * 50 + "[/dim]")
                else:
                    print("─" * 50)
        
        # Calculate execution time
        end_time = time.time()
        execution_time = end_time - start_time
        
        if console:
            console.print(f"[green]✅ Deep Agent completed processing in {step_count} steps[/green]\n")
        else:
            print(f"✅ Deep Agent completed processing in {step_count} steps\n")
        
        
        # Extract final output from the streaming result
        if final_result and hasattr(final_result, 'get') and 'messages' in final_result:
            # Deep agent returns messages in the result
            messages = final_result['messages']
            final_output = messages[-1].content if messages else str(final_result)
        else:
            final_output = str(final_result) if final_result else "Deep Agent completed the task."
        
        # Display results
        if console:
            console.print("\n[bold green]✅ Deep Agent Results:[/bold green]")
            console.print("="*60)
            console.print(f"\n[bold]Comprehensive Analysis:[/bold]\n{final_output}")
            
            # Display performance metrics
            console.print(f"\n[bold blue]📊 Deep Agent Performance Metrics:[/bold blue]")
            console.print("="*60)
            console.print(f"⏱️  [bold]Execution Time:[/bold] {execution_time:.2f} seconds")
            console.print(f"🔄 [bold]Processing Steps:[/bold] {step_count}")
            console.print(f"🎯 [bold]Total Tokens:[/bold] {cb.total_tokens:,}")
            console.print(f"📤 [bold]Prompt Tokens:[/bold] {cb.prompt_tokens:,}")
            console.print(f"📥 [bold]Completion Tokens:[/bold] {cb.completion_tokens:,}")
            console.print(f"💰 [bold]Total Cost:[/bold] ${cb.total_cost:.4f}")
            
            console.print("\n[bold cyan]🧠 Deep Agent Advantages Demonstrated:[/bold cyan]")
            console.print("• 🎯 Enhanced Tools: More sophisticated search_web_deep, analyze_data_deep")
            console.print("• 📊 Advanced Analysis: Pattern recognition, confidence scoring, semantic analysis")
            console.print("• 📁 Structured Documentation: Enhanced metadata, timestamps, comprehensive tagging")
            console.print("• 🔍 Systematic Approach: Multi-phase research methodology")
            console.print("• � Deep Insights: Goes beyond surface-level information")
            
            console.print("\n[bold magenta]📈 Performance Comparison:[/bold magenta]")
            console.print("📌 Standard Agent: Linear processing, basic tool usage")
            console.print("🚀 Deep Agent: Systematic methodology, enhanced tools, comprehensive analysis")
            console.print("📊 Result Quality: Standard provides answers, Deep Agent provides insights")
        else:
            print("\n✅ Deep Agent Results:")
            print("="*60)
            print(f"\nComprehensive Analysis:\n{final_output}")
            
            # Display performance metrics
            print(f"\n📊 Deep Agent Performance Metrics:")
            print("="*60)
            print(f"⏱️  Execution Time: {execution_time:.2f} seconds")
            print(f"🔄 Processing Steps: {step_count}")
            print(f"🎯 Total Tokens: {cb.total_tokens:,}")
            print(f"📤 Prompt Tokens: {cb.prompt_tokens:,}")
            print(f"📥 Completion Tokens: {cb.completion_tokens:,}")
            print(f"💰 Total Cost: ${cb.total_cost:.4f}")
            
            print("\n🧠 Deep Agent Advantages Demonstrated:")
            print("• Enhanced Tools: More sophisticated analysis capabilities")
            print("• Advanced Analysis: Pattern recognition and confidence scoring")
            print("• Structured Documentation: Enhanced metadata and organization")
            print("• Systematic Approach: Multi-phase research methodology")
            print("• Deep Insights: Goes beyond surface-level information")
            
            print("\n📈 Performance Comparison:")
            print("Standard Agent: Linear processing, basic tool usage")
            print("Deep Agent: Systematic methodology, enhanced tools, comprehensive analysis")
    
    except Exception as e:
        if console:
            console.print(f"[red]❌ Error: {str(e)}[/red]")
            console.print("[yellow]Make sure you have deepagents library and DIAL API credentials[/yellow]")
        else:
            print(f"❌ Error: {str(e)}")
            print("Make sure you have deepagents library and DIAL API credentials")

if __name__ == "__main__":
    asyncio.run(main())